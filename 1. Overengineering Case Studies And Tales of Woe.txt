# 1. OVERENGINEERING CASE STUDIES AND TALES OF WOE
--------------------------------------------------

* What they wanted isn't what they needed
-----------------------------------------
A web developer is looking for work. In the neighborhood, there's a new specialty store and they don't have a website. So they reach out. Sounds like a good fit. The owner wants to 
advertise their specials, start a blog about the business and show off the space. There's pages upon pages of requirements and they want to do. 

Sounds fantastic. And there are web frameworks that will do everything they need. Here's the hourly rate, agreed. Here's the deliverables and design and everything sounds good. Days, 
then weeks pass, the site is built with most of the controls and customizations the customer asked for. The owner is happy and cuts a check, and the web developer happily cashes it. 
The domain is advertised and everyone lives happily ever after. Except, the site is stagnant. 

The specials aren't getting updated. The blog has a couple entries and nobody's commenting on them. There's a large number of third party modules in the site and maintenance is becoming a 
hassle. Looking at the analytics, people aren't so much bouncing, as just not coming. A few months pass, the site is the same. 

A year or two passes and the business closes, and the site is quietly retired. What did the business ask for? A complicated website with lots of bells and whistles. 

What did they need? Probably just a social media page. At the end of the day, the service provider did what the customer wanted, but it wasn't what they needed.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is overengineering?
--------------------------
According to Wikipedia in 2022, over-engineering is, quote, "The act of designing a product or providing a solution to a problem in an elaborate or complicated manner, where a simpler 
solution exists with the same efficiency and effectiveness as that of the original design." 

Practically. Over-engineering is the opposite of the KISS principle, an acronym for keep it simple, silly. So, why make something more complicated than it needs to be? Often, 
over-engineering is in the service of safety. "Whose safety?" you might ask. In the case of a car, the answer is obvious: Everybody. 

This includes the car's occupants, pedestrians, other drivers, the car itself, even the companies that built the car. In the case of software, what is safe? It depends on the project, 
their requirements, and the audience. There are times where less is more. There are times when it's necessary to overbuild with caution. 

If your software involves health, finance, personal information, security and so forth, then you need to be careful. Be aware of the applicable standards for your industry and exposure to 
risk. Throughout this course, we'll explore some ways to figure out what's right for your project. You too can recognize when something is over-engineered.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Rube Goldberg inventions satirized overengineering
----------------------------------------------------
Over-engineering is not a modern problem. In 1929, American cartoonist Rube Goldberg created an internationally known cartoon series named, "The Inventions of Professor Lucifer Gorgonzola 
Butts." All knowing. Goldberg wrote, "In my cartoons, Professor Lucifer Gorgonzola Butts invented elaborate machines to accomplish such Herculean tasks as shining shoes, opening screen 
doors, keeping moths out of clothes closets, retrieving soap in the bathtub, and other innocuous problems. 

Only, instead of using the scientific elements of the laboratory, I added acrobatic monkeys, dancing mice, chattering false teeth, electric heels, whirling dervishes, and other 
incongruous elements. In theory, all of these inventions would work, but were overblown to surreal and impossible proportions with a convoluted series of steps that stretched the 
imagination." Here's an example from Rube Goldberg's sideshow from November 26th, 1939. 

The weekly invention was a socially approved method of cooling hot soup. When hot soup touches your tongue you yell "ouch" and wake up a sleeping porcupine. A, quill's puncture water 
filled paper bag, B, on a balancing scale. On the opposite side of the scale, the weight of a ball, C, opens a Jack in a box, D. 

A wax head of a movie magnate, E, shoots out of the Jack in the box. And a yesman, F, starts nodding their head, causing a fan, G, to cool off the soup. The satirical impact could be 
found in other mediums, including in his friend, Charlie Chaplin's 1936 film, "Modern Times." The movie featured a Rube Goldberg invention brought to life feeding Chaplin in an incredibly 
memorable and over the top scene. In the 1940 short film, "Something for Nothing," Goldberg compares his outlandishly complicated inventions to real patents. 

The example he gave was U.S. patent 556248, a saluting device from March, 1896. From the patent itself, this invention relates to a novel device for automatically affecting polite 
salutations by the elevation and rotation of the hat on the head of the saluting party when said person bows to the person or person saluted, the actuation of the hat being produced by a 
mechanism therein and without the use of the hands in any manner. The patent was granted. Rube Goldberg's satire highlights that over-engineering is not a modern problem. As with all 
great satires, we laugh as we learn.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Cautionary tale: Creative works
---------------------------------
In a skyscraper, a major transition in a publication focused on mass media was occurring. The publication's website used almost two dozen different content management systems. 

The overhead of managing it all was causing chaos. The solution? One monolithic content management system. As part of the build, a migration from the old systems to the new was necessary. 

Part of the document structure was a categorization system called creative works. The purpose was to relate content for easy navigation. The categories contained people, movies, music 
bands, and so forth. There was a hierarchical relationship to the categories. For example, albums by a particular band would be under that band. 

At one point, there was even a full-time librarian whose job was to manage the taxonomy. Two years prior, the librarian had left. So, the editors reverted to using flat tagging. 

The new CMS was an opportunity by a product owner to clean up the taxonomy and bring back the hierarchy. The migration would remove the duplicates and misspellings, simplify and restore 
order. So, we got to work. Data exports, spreadsheets of mapping, complex algorithms, and lots of tedious testing. We were most of the way through the hundreds of thousands of records, 
then the product owner left the company. Turnover's normal. So, the team kept going. The work was completed and the site launched without incident. 

After a few months, there was a problem. Nobody was using the new taxonomy. Editors preferred flat tagging, so that's what they used. It took weeks, if not months, to perfect the taxonomy 
and nobody used it. What happened? The feature was important only to the product owner. Nobody asked the audience what they preferred. 

In a professional deadline driven newsroom, what's the most efficient? The path of the most impact and the least resistance.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What causes overengineering?
------------------------------
There is no single thing that causes over-engineering. Like versions of truth and perspectives, over-engineering is visible in hindsight but hard to decipher in the moment. 

There are some common root causes, many of which we're all guilty of. No shame is necessary. Our shared goal is to continue to improve both ourselves and those around us. 

First is the need to do good things. We strive to help others around us. If someone is struggling, we should assist them to the best of our abilities. If someone asks for help, we're 
there for them without question. That's where one of the problem arises, the lack of questioning. 

If we do what someone asks without thinking about the result, then we can compound the problem. Next is pride in our work and our abilities. Someone says, "Can you do this thing?" "Of 
course. I could do it in my sleep." Because it's not a problem and trivial to you, it's easy for everyone, right? "Of course, nothing to worry about. 

Here's exactly what you asked for and some extra." Then when the recipient is overwhelmed, we're surprised. Restraint and reflection can help. Sometimes the problem is plain ignorance. 

Ignorance is not a bad word. It only means lacking knowledge or information. I'm ignorant all the time and we are all ignorant. That's okay. What matters is how we make decisions given 
our ignorance. Do we know enough to commit? Do we know the requirements? What are the risks? Should we do more research or are we confident? Are we being decisive or foolhardy? Knowing 
that we are ignorant of something shouldn't prevent progress. Instead, make a calculated decision. Then there's the somebody else's problem situation. 

Somebody told you to hop like a frog and you didn't even ask how high. If they asked for gigantic tires on this tiny car, then they'll get it because the customer is always right. 

You may know something is wrong but you don't say anything and do it anyway. Or you do say something but your boss absorbs it and does nothing. That has the same effect. 

The reality is that it's everybody's problem. The service providers, the clients, and the users. There's no one thing that causes over-engineering. Doing good things without asking if 
they're necessary. Pridefulness in delivering the impossible. Ignorance of requirements and consequences. Lack of responsibility. 

Being aware of these patterns is the first step in recognizing it before it becomes a problem. Finally, over-engineering can be fun. Wait, what? Yes, it can be glorious to over-engineer a 
problem because you can. As I'm writing this course, I'm also working on an over-engineered text puzzle solver. The solver uses dictionaries, letter frequency analysis, and deductive 
reasoning. It also defeats the exercise of doing the puzzle yourself as you learn and experiment. 

And yet, I'm having fun debugging, adding automated tests, and writing a tool that nobody will ever use. Over-engineering on purpose can be fun as a hobby or practical if working on 
safety or medical devices.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Cautionary tale: I don't like this wheel
------------------------------------------
The project was to build a publishing platform using a common open-source content management framework. The advantage of using the framework was that there were many off-the-shelf 
components. If you needed a particular functionality, chances were that there was already a solution. Editors needed to choose the layout for a given document: one page might need a hero 
image at the top, another may have links to related content and so forth. 

It's a pretty common need, and there's a third party project that does exactly that: the project provided layout, high performance caching and standardized integrations. 

We wrote up the proposal, including this component. The client had an interesting wrinkle: a technical oversight committee. 

Their goal was to standardize, use best practices, and make sure the company used the best tools. In practicality, these good intentions turned into arbitrary gatekeeping. Upon review, 
they denied the use of the project because it would introduce slow performance; instead, we were to use an in-house tool that was being written as a reimplementation. 

The third-party tool could create slow sites, but only if it was misconfigured and left in development mode. This concern was like saying, "We shouldn't use a knife because it could hurt 
someone if it was backwards." We objected but were overruled. So we used the in-house tool without a community of thousands of engineers and testers. 

Throughout the rest of the project, we spent countless hours extending, debugging, and creating workarounds for this in-house tool. For this and similar reasons, the project ended up not 
shipping. This experience was an example of reinventing the wheel; this expression means to waste a large amount of time or effort in creating something that already exists. 

In this case, the third-party project was the wheel. This was also a case od have not invented here: the cultural tendency to avoid using or getting knowledge of our products from 
something external. This attitude can stifle collaboration as well. For example, if there's a standard and you don't like it, instead of improving the standard or learning more about it, 
you make your own. Now, there's two competing standards which may not be a bad thing until there's a dozen standards. 

There can be value in doing something yourself instead of using something off the shelf. Understand that there can be a great cost if you aren't completely certain. The risk may be worth 
it, so make an informed decision.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* The perfect storm for a culture of overengineering
----------------------------------------------------
An organization or group can unintentionally foster a culture of over-engineering. Where does over-engineering begin on a project? There's no one place where it starts and there's no 
single role to fault. Requirements are necessary for any project and they can take many forms. There's business requirements, technical requirements, deadlines, and budgets. 

Requirements are necessary to keep a project focused and successful. They can also cause trouble before any work begins if they're too prescriptive. 

Requirements come from all levels of project leadership. Stakeholders, product owners, to technical leads and architects are all responsible. 

A good requirement should detail the what, not how. For example, describing the requirements to clean a floor. One set of requirements requires a particular broom with a specific type of 
synthetic bristles of given length, used a particular angle with so much pressure with a specific pattern for optimal and even coverage of all lateral surfaces, and the amount and grade 
of grit expected to collect for measurement by weight, and eventual disposal into an approved receptacle. As an alternative, here's a broom and a dust pan. 

Please sweep the floor until it's clean. Both sense of requirements specify tools and goals, and would result in a clean floor. One is long and difficult to understand. 

One is too prescriptive and doesn't trust the person sweeping to know what they're doing. If followed without question, it'd take a sarcastic amount of time to complete. ♪ 
Too many cooks ♪ ♪ Too many cooks ♪ The proverb too many cooks spoil the broth means if too many people are involved in a task, it won't be done well. 

This applies to all levels of a project, from decisions to implementation. Meetings with too many people can drag and meander, wasting everybody's time. Too many stakeholders can lead to 
scope creep, conflicting requirements, and priority confusion. Too many implementers can lead to chaos and waterfalling. 

During the design phase, it's important to develop a vision to strive towards, yet a wire frame and nonfunctional mockup can make the work look too easy. 

Great design, much like artistry and athleticism, makes exceptionalism look effortless. Make sure that the design pairs with a technical plan for implementation. 

Include rough estimates for how long it will take to build. Sometimes a seemingly small design feature can account for a disproportionate amount of work. Likewise, design should review 
any technical implementation to ensure the integrity of the vision. Last but not least is the implementation phase. 

Well-intentioned engineers through ignorance and inexperience can create exquisite nightmares. Well-intentioned developers can also cause mayhem by creating unmaintainable, opaque, and 
overly complex systems. Often, the excuse is the guise of job security. Another example of over-engineering implementation are beautifully abstracted systems of perfect inheritance, or 
unified definitions such as constants or styles that take more time to maintain than to expand. Nobody plans on failure, but it's very easy to make a perfect and incomplete project. 

I have been guilty of every single one of these behaviors and have shared their burden. Responsibility is both individual and shared from stakeholders to implementers. By acknowledging 
how and why these situations happen, we can adjust to compensate. The culture for over-engineering can come from the entire team, and together, it can be overcome.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Success story: Sit first, dash seven
--------------------------------------
We were working on a nonprofit organization's website. This site needed to tell the story of the group, publish news, and get people involved with their events. 

There was a reasonable budget and several roles on the team, including a designer. The designer was reviewing their wire frame designs with both the team and the client. 

We got to the events calendar. On the events detail page, there was an innocuous button labeled "RSVP". RSVP is a request to reply to an invitation to an event. 

Seems simple and yet, within events management, a reservation can mean lots of things: gathering details about the person, collecting fees, managing communication and a lot more. 

This one button, which was logical to include, represented a lot of hidden work. We were building on an existing system, so why not use something off the shelf? Event management packages 
existed, but were complex and required a lot of customization. The timeline prohibited this level of effort on a smaller project. We asked the responsible group, "What do you currently 
use to manage your events?" Turns out they already had a third party event system that they've used for years. 

They just wanted to link the main website to their system, which was reasonable. We read the event system manual and found that we could get a listing of events. Therefore, the work 
required was to get and list events and link each event through the RSVP button to the third party site. Instead of building an event reservation system, we paused and asked questions. 

Without understanding, we fulfilled the intent of the requirements. The effort to learn more and ask questions paid back in cost and effort savings. There is a Zen Koan, or a riddle, 
which applies to the situation. "Sit first, dash seven." The longer form is, "First you sit, then seven directions you will run." What does this mean? Take a deep breath and calm 
yourself, think and plan, then, take action. The wire frame required an event RSVP system. Instead of building one and wasting effort, we paused, learned, and planned, then took action. 

Sit first, dash seven.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Analyzing the request
-----------------------
When we're faced with a new challenge, here's some questions we can ask to avoid confusion and wasted effort. First, what's the end goal of the request? This is different from describing 
how to do something. For example, a good goal could be to feed 10 people and meet their dietary restrictions by 5:00 PM. A bad example would be to make 10 sandwiches. 
That's not a goal, that's a way to achieve a goal. We can end up with a pile of 10 peanut butter sandwiches. 

That would fulfill the request, but someone with peanut or wheat allergies couldn't eat them. I found the SMART framework for goal setting is very useful. SMART is an acronym where the 
goals are S for specific, M for measurable, A for attainable, R for relevant, and T for time-bound. 

Even if you don't SMART exactly, the framing can help improve how you think about goal setting. Another question is, who needs this feature? If there's an audience of 100 people, but only 
one person needs a thing, do we really need it? Should the interface be usable to anyone without training or are only experts using it? When learning about the audience, it's good to know 
the source of information. Someone who says "Everyone wants this" may not be speaking for the whole group. Trust, but verify. 

Knowing the audience guides decision making and informs the interface and user experience. Why is this feature needed? Several people asked for it, but does it have a practical use? Does 
it contribute to the main goal? Just because you can do something doesn't mean you should. If you're unsure, consider not doing something and any potential consequences. 

If you can achieve the goal without it, was it even necessary? Is this only way? There's usually more than one way to solve a problem. If a request is too specific, then it may exclude 
other viable solutions. If you're not evaluating options, consider the cost of each, including complexity and time. 

Avoid the not-invented-here attitude by being open to options and opinions outside of your own. Finally, what data backs up the request? Assumptions aren't the same as hard data so make 
sure there are facts that drive your decisions. The history of those facts also matters including how much you can trust the source. 

Was it a vendor trying to upsell? A casual search engine result? A random relations teenager who could build it in an afternoon? To review, what are the goals? Who needs this feature and 
why? Is this the only way to achieve the goal? What data supports this understanding and where did it come from? Answering these questions at the outset can save a lot of headaches later 
in the project.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Success story: Do we even need to do it?
------------------------------------------
One of the tasks of the front end of a website is to ensure cross-browser compatibility. The site should work and have a consistent look and feel across different browsers. 

We had to test Chrome, Firefox, Safari, and at the time, Internet Explorer. This is time-consuming, but to maximize accessibility, you want the audience to be able to use the site. 

The project goal was to update the front end of the site to use a new layout. One of the front end engineers assumed we needed to support older versions of internet Explorer, because, 
well, we always had. That put constraints on what tools we could use, how we wrote code, and which libraries we could use to save time. 

Of course, there were shims or tools that provided compatibility for older browsers. Those shims added overhead and another source of potential failures and troubleshooting. 

As a team, we thought about the browser support some more. That old version of Internet Explorer was last updated several years ago. Microsoft had been pretty aggressive in its campaign 
to get people to upgrade. How many people actually use that version to access our website? We checked our site analytics. 

Less than 3% of our audience did. We took that data to our stakeholders and made the case for ease of growth and maintenance for the 97% of our site users. 

The need for cross-browser compatibility was changed. To our relief, it now excluded that ancient version of Internet Explorer. That gave the team the current generation tooling and 
simplified the build. There are a few takeaways here. First, because we've always done a thing doesn't mean we still need to do it. There may have been very good reasons, but those 
reasons may no longer be valid. Second, support your decision-making with hard data. If 20% of the audience used the site with that browser version, we would have supported it. 

Finally, a one-size-fits-most approach means there will be some exceptions and edge cases, but the vast majority of your users won't have any concerns. Find a practical solution.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Building a minimum viable product
-----------------------------------
When working on a large project, it's important to get into a cycle of iterative development as soon as possible. If you don't, there can be a gap between expectations and the deliverable.
By showing your in progress work on a regular basis and gathering feedback, you can react and build trust in the product. 

At the beginning of the project, foundational work doesn't give us much to look at. Features are prioritized and added and the system becomes usable for some small or partial tasks. 

When is the right time to start demonstrating? Enter a minimum viable product. A minimum viable product, or MVP, is a product which has just enough features to be usable by early 
customers to gather validated learning about the product and its continued development. A MVP is the basis of iteration and drives the conversation. 

When is a product minimally viable? It depends on the feature or product. What's the most basic task that you can accomplish? For example, if you need authentication, can you both succeed 
and fail at logging in? If it's like a blog or a news page, can you read the content and know who wrote it and when? When presenting a MVP, be upfront about the completion state. 

There's no need to be defensive so say it's a work in progress. "Here's what's done "and the next steps are going to be X, Y, and Z." There can be multiple MVPs within a project because 
there are multiple feature within the project. There's no need to wait for every single feature to be in a presentable state before starting to get feedback. 

One of the points of a MVP is avoiding perfection paralysis. When you work towards completion, there's no sense in waiting for perfection before asking for opinions. That's when you end 
up with mismatched priorities and differences in subjective opinions. Get feedback early and often. When you do start showing an MVP, continue to provide iterations and improvements. 

People like acknowledgement and to have their feedback heard and incorporated. You don't have to do everything brought up in a product review. That's not efficient. On the other hand, if 
you never show improvements, you instead build the perception that this isn't a feedback loop. The point of a minimum viable product is to get the feature to where someone can use it and 
give relevant feedback. The sooner you can get to that state, the sooner you can iterate and build confidence in what you're building.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Estimation and prioritization
-------------------------------
Projects of any size have common boundaries, including goals, scope, budget, and resources. Before we can start building a project, how can we plan the work that stays within those 
boundaries? The project management process of estimation and prioritization helps make those plans. This isn't a formal breakdown of any particular project management strategy. 

Instead, I'm describing some practical and common tasks across many successful projects. This type of planning is a collaborative effort between the product manager and the technical 
lead. A budget represents the cost, which includes both money and time. Cost estimation can come from time estimation given an hourly rate. 

Therefore, knowing how long something will take can help estimate the actual monetary costs. Resources are the people and tools available to complete tasks. People can have a cost if they 
have an hourly rate and have boundaries, such as their expertise or time. Tooling also has licensing cost, either commercial services or open source. 

I'm a proponent of opensource software, which people think of as free. The cost of open source software is time, given the often variable levels of support. Using open source software 
offsets the cost of buying a product or service outright, but instead takes time to build and maintain. 

You should also be contributing back to the ecosystem, either in the form of issues, poll requests, and other types of participation. 

So that brings back into question, how do we estimate the time? Break individual goals into discreet pieces of work with their own requirements and acceptance criteria. 

If an individual task is too complex, continue to break it down until you have a collection of smaller tasks. For each task, estimate the effort. 

This can be a rough estimate of hours, or something more informal such as shirt sizing, small, medium, and large. Regardless of how, stay consistent. 

Take those same requirements and features and do a prioritization exercise. Based on the knowledge of the product and the stakeholders, how important is each feature? There's more than 
one way to do this. Ranked lists work where a top priority is one, the next is two, and so forth. That can be daunting if there's a lot of features. 

Like shirt sizing, high, medium and low priority also works. This is a good exercise for the actual stakeholders or target audience as well. What's more important, thing A or thing B? 
Risk evaluation can also be part of the estimation process. Consider both the risk of not implementing something and the risk of the unknown. 

For example, if you only know a little about how to do something, then it would be a higher risk than something you were certain of. Given effort, risk, and prioritization, you can make 
informed decisions about what to do. High effort, high risk, and low priority means it likely won't happen. You may be thinking my project is too small to do this. 

You're the best judge of that, not me. The framing of estimation and prioritization can be simple and fast if you want it to be. For example, let's consider household chores. 

Putting an another coat of paint on the basement steps would look nice, but it's going to take a couple days and cut off access to the basement for the duration. 

Shoveling snow on walkways outside takes less time, mitigates risk, and takes less effort. I rank not falling over pretty steps, so I'll do the shoveling first, and will hold off on 
painting until it becomes more important. Cost and interest drive prioritization. Before you start work, do some estimations and make informed decisions.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Cautionary tale: Literal fulfillment
--------------------------------------
An enterprise news publishing company has articles listed throughout the site. Each article had a category and would be listed on each category page, as well as the homepage. 
This is standard for many sites with content management systems. One of the normal requirements was editorial control over placement of content. 

Things got complex with the requirements for arbitrary placement of articles in any part of the site. For example, the first and second articles were by date but the third was manually 
placed. On another page, the top listing was automatic. So we built the data structures and the interface. Next, we adapted everything that displayed content to use the new sorting 
mechanism. In fact, it took us into launch to get all the bugs worked out, but it all worked. Editors had full control over all the items. 

Was this success? We completed the task but it had a very high cost. Other features lost priority and weren't worked on. By implementing this feature, we introduced technical debt. 

We now had to maintain the new interface and every single content listing had to have that custom sort. In hindsight, what should we have done? Instead of a whole new interface and data 
structure, the practical solution would've been a sticky flag. What does that do? It's a bullion property, defaulting defaults or zero. When you display content, you sort by sticky, then 
by date. It would've taken minutes to put in place. How does this cautionary tale relate to estimation and prioritization? Had we estimated the cost and risk, we could have avoided the 
technical debt. Sort prioritization is logical, but the way we went about it wasn't. The lesson is to determine the effort, risk and prioritization. 

If something is a high priority and the effort and or risk it too high, think of other approaches that fulfill the intent of the requirements. Try to find a compromise that balances the 
need of the customer and the cost to build.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Tangible iteration
--------------------
So far we've been discussing going too far with over-engineering and overbuilding. We've made the case to demo as early as possible to get feedback. There's another variation in the other 
extreme which can also be problematic. If there isn't enough to show in a usable workflow, then you can't get relevant feedback. 

Without feedback, you can't iterate and you can end up building something that isn't wanted. Iteration only works if you have something to iterate upon. 

That sounds easy to say, but what does having something iterable mean? Iteration communicates by having something tangible, which means touchable. 

With software, that translates to being able to have a meaningful workflow that can be used. It doesn't have to be complete or complex. For example, a workflow could be to use a menu and 
choose something, change an option, and see the result. There can be place holders, other broken menu links, unsolved messages, and so forth. 

If you stick to the workflow, everything should work without exploding. This isn't about smoke and mirrors and pretending things aren't more complete than they are. 

Quite the opposite. Be transparent about what's not complete, but not to the point of defensiveness. Of course, it's a work in progress so set clear expectations. 

When demoing, have a safe script that you can stick to. If something is flaky, consider omitting it to cut distractions. Have you seen a video game demo of a work in progress at a trade 
show? Sometimes only a company representative is playing or there's only one playable level. Chances are that there's a lot of things that aren't complete. 

That's good though because the public gets to see their work and progress and give feedback. Because it's incomplete, there's still an opportunity to iterate. 

Demos are often held together with duct tape, wires, and hope. Effective demos show enough to have a reaction, to give feedback, and to provide a basis for iteration. 

Get the product into a state where it's touchable enough to show off a workflow and you'll get good feedback before it's too late.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

















































































































































