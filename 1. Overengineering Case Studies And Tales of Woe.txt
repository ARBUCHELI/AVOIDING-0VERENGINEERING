# 1. OVERENGINEERING CASE STUDIES AND TALES OF WOE
--------------------------------------------------

* What they wanted isn't what they needed
-----------------------------------------
A web developer is looking for work. In the neighborhood, there's a new specialty store and they don't have a website. So they reach out. Sounds like a good fit. The owner wants to 
advertise their specials, start a blog about the business and show off the space. There's pages upon pages of requirements and they want to do. 

Sounds fantastic. And there are web frameworks that will do everything they need. Here's the hourly rate, agreed. Here's the deliverables and design and everything sounds good. Days, 
then weeks pass, the site is built with most of the controls and customizations the customer asked for. The owner is happy and cuts a check, and the web developer happily cashes it. 
The domain is advertised and everyone lives happily ever after. Except, the site is stagnant. 

The specials aren't getting updated. The blog has a couple entries and nobody's commenting on them. There's a large number of third party modules in the site and maintenance is becoming a 
hassle. Looking at the analytics, people aren't so much bouncing, as just not coming. A few months pass, the site is the same. 

A year or two passes and the business closes, and the site is quietly retired. What did the business ask for? A complicated website with lots of bells and whistles. 

What did they need? Probably just a social media page. At the end of the day, the service provider did what the customer wanted, but it wasn't what they needed.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is overengineering?
--------------------------
According to Wikipedia in 2022, over-engineering is, quote, "The act of designing a product or providing a solution to a problem in an elaborate or complicated manner, where a simpler 
solution exists with the same efficiency and effectiveness as that of the original design." 

Practically. Over-engineering is the opposite of the KISS principle, an acronym for keep it simple, silly. So, why make something more complicated than it needs to be? Often, 
over-engineering is in the service of safety. "Whose safety?" you might ask. In the case of a car, the answer is obvious: Everybody. 

This includes the car's occupants, pedestrians, other drivers, the car itself, even the companies that built the car. In the case of software, what is safe? It depends on the project, 
their requirements, and the audience. There are times where less is more. There are times when it's necessary to overbuild with caution. 

If your software involves health, finance, personal information, security and so forth, then you need to be careful. Be aware of the applicable standards for your industry and exposure to 
risk. Throughout this course, we'll explore some ways to figure out what's right for your project. You too can recognize when something is over-engineered.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Rube Goldberg inventions satirized overengineering
----------------------------------------------------
Over-engineering is not a modern problem. In 1929, American cartoonist Rube Goldberg created an internationally known cartoon series named, "The Inventions of Professor Lucifer Gorgonzola 
Butts." All knowing. Goldberg wrote, "In my cartoons, Professor Lucifer Gorgonzola Butts invented elaborate machines to accomplish such Herculean tasks as shining shoes, opening screen 
doors, keeping moths out of clothes closets, retrieving soap in the bathtub, and other innocuous problems. 

Only, instead of using the scientific elements of the laboratory, I added acrobatic monkeys, dancing mice, chattering false teeth, electric heels, whirling dervishes, and other 
incongruous elements. In theory, all of these inventions would work, but were overblown to surreal and impossible proportions with a convoluted series of steps that stretched the 
imagination." Here's an example from Rube Goldberg's sideshow from November 26th, 1939. 

The weekly invention was a socially approved method of cooling hot soup. When hot soup touches your tongue you yell "ouch" and wake up a sleeping porcupine. A, quill's puncture water 
filled paper bag, B, on a balancing scale. On the opposite side of the scale, the weight of a ball, C, opens a Jack in a box, D. 

A wax head of a movie magnate, E, shoots out of the Jack in the box. And a yesman, F, starts nodding their head, causing a fan, G, to cool off the soup. The satirical impact could be 
found in other mediums, including in his friend, Charlie Chaplin's 1936 film, "Modern Times." The movie featured a Rube Goldberg invention brought to life feeding Chaplin in an incredibly 
memorable and over the top scene. In the 1940 short film, "Something for Nothing," Goldberg compares his outlandishly complicated inventions to real patents. 

The example he gave was U.S. patent 556248, a saluting device from March, 1896. From the patent itself, this invention relates to a novel device for automatically affecting polite 
salutations by the elevation and rotation of the hat on the head of the saluting party when said person bows to the person or person saluted, the actuation of the hat being produced by a 
mechanism therein and without the use of the hands in any manner. The patent was granted. Rube Goldberg's satire highlights that over-engineering is not a modern problem. As with all 
great satires, we laugh as we learn.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Cautionary tale: Creative works
---------------------------------
In a skyscraper, a major transition in a publication focused on mass media was occurring. The publication's website used almost two dozen different content management systems. 

The overhead of managing it all was causing chaos. The solution? One monolithic content management system. As part of the build, a migration from the old systems to the new was necessary. 

Part of the document structure was a categorization system called creative works. The purpose was to relate content for easy navigation. The categories contained people, movies, music 
bands, and so forth. There was a hierarchical relationship to the categories. For example, albums by a particular band would be under that band. 

At one point, there was even a full-time librarian whose job was to manage the taxonomy. Two years prior, the librarian had left. So, the editors reverted to using flat tagging. 

The new CMS was an opportunity by a product owner to clean up the taxonomy and bring back the hierarchy. The migration would remove the duplicates and misspellings, simplify and restore 
order. So, we got to work. Data exports, spreadsheets of mapping, complex algorithms, and lots of tedious testing. We were most of the way through the hundreds of thousands of records, 
then the product owner left the company. Turnover's normal. So, the team kept going. The work was completed and the site launched without incident. 

After a few months, there was a problem. Nobody was using the new taxonomy. Editors preferred flat tagging, so that's what they used. It took weeks, if not months, to perfect the taxonomy 
and nobody used it. What happened? The feature was important only to the product owner. Nobody asked the audience what they preferred. 

In a professional deadline driven newsroom, what's the most efficient? The path of the most impact and the least resistance.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What causes overengineering?
------------------------------
There is no single thing that causes over-engineering. Like versions of truth and perspectives, over-engineering is visible in hindsight but hard to decipher in the moment. 

There are some common root causes, many of which we're all guilty of. No shame is necessary. Our shared goal is to continue to improve both ourselves and those around us. 

First is the need to do good things. We strive to help others around us. If someone is struggling, we should assist them to the best of our abilities. If someone asks for help, we're 
there for them without question. That's where one of the problem arises, the lack of questioning. 

If we do what someone asks without thinking about the result, then we can compound the problem. Next is pride in our work and our abilities. Someone says, "Can you do this thing?" "Of 
course. I could do it in my sleep." Because it's not a problem and trivial to you, it's easy for everyone, right? "Of course, nothing to worry about. 

Here's exactly what you asked for and some extra." Then when the recipient is overwhelmed, we're surprised. Restraint and reflection can help. Sometimes the problem is plain ignorance. 

Ignorance is not a bad word. It only means lacking knowledge or information. I'm ignorant all the time and we are all ignorant. That's okay. What matters is how we make decisions given 
our ignorance. Do we know enough to commit? Do we know the requirements? What are the risks? Should we do more research or are we confident? Are we being decisive or foolhardy? Knowing 
that we are ignorant of something shouldn't prevent progress. Instead, make a calculated decision. Then there's the somebody else's problem situation. 

Somebody told you to hop like a frog and you didn't even ask how high. If they asked for gigantic tires on this tiny car, then they'll get it because the customer is always right. 

You may know something is wrong but you don't say anything and do it anyway. Or you do say something but your boss absorbs it and does nothing. That has the same effect. 

The reality is that it's everybody's problem. The service providers, the clients, and the users. There's no one thing that causes over-engineering. Doing good things without asking if 
they're necessary. Pridefulness in delivering the impossible. Ignorance of requirements and consequences. Lack of responsibility. 

Being aware of these patterns is the first step in recognizing it before it becomes a problem. Finally, over-engineering can be fun. Wait, what? Yes, it can be glorious to over-engineer a 
problem because you can. As I'm writing this course, I'm also working on an over-engineered text puzzle solver. The solver uses dictionaries, letter frequency analysis, and deductive 
reasoning. It also defeats the exercise of doing the puzzle yourself as you learn and experiment. 

And yet, I'm having fun debugging, adding automated tests, and writing a tool that nobody will ever use. Over-engineering on purpose can be fun as a hobby or practical if working on 
safety or medical devices.

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Cautionary tale: I don't like this wheel
------------------------------------------
The project was to build a publishing platform using a common open-source content management framework. The advantage of using the framework was that there were many off-the-shelf 
components. If you needed a particular functionality, chances were that there was already a solution. Editors needed to choose the layout for a given document: one page might need a hero 
image at the top, another may have links to related content and so forth. 

It's a pretty common need, and there's a third party project that does exactly that: the project provided layout, high performance caching and standardized integrations. 

We wrote up the proposal, including this component. The client had an interesting wrinkle: a technical oversight committee. 

Their goal was to standardize, use best practices, and make sure the company used the best tools. In practicality, these good intentions turned into arbitrary gatekeeping. Upon review, 
they denied the use of the project because it would introduce slow performance; instead, we were to use an in-house tool that was being written as a reimplementation. 

The third-party tool could create slow sites, but only if it was misconfigured and left in development mode. This concern was like saying, "We shouldn't use a knife because it could hurt 
someone if it was backwards." We objected but were overruled. So we used the in-house tool without a community of thousands of engineers and testers. 

Throughout the rest of the project, we spent countless hours extending, debugging, and creating workarounds for this in-house tool. For this and similar reasons, the project ended up not 
shipping. This experience was an example of reinventing the wheel; this expression means to waste a large amount of time or effort in creating something that already exists. 

In this case, the third-party project was the wheel. This was also a case od have not invented here: the cultural tendency to avoid using or getting knowledge of our products from 
something external. This attitude can stifle collaboration as well. For example, if there's a standard and you don't like it, instead of improving the standard or learning more about it, 
you make your own. Now, there's two competing standards which may not be a bad thing until there's a dozen standards. 

There can be value in doing something yourself instead of using something off the shelf. Understand that there can be a great cost if you aren't completely certain. The risk may be worth 
it, so make an informed decision.

------------------------------------------------------------------------------------------------------------------------------------------------------------------









































































































