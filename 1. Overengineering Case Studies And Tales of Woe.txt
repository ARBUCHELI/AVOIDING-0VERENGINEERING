# 1. OVERENGINEERING CASE STUDIES AND TALES OF WOE
--------------------------------------------------

* What they wanted isn't what they needed
-----------------------------------------
A web developer is looking for work. In the neighborhood, there's a new specialty store and they don't have a website. So they reach out. Sounds like a good fit. The owner wants to 
advertise their specials, start a blog about the business and show off the space. There's pages upon pages of requirements and they want to do. 

Sounds fantastic. And there are web frameworks that will do everything they need. Here's the hourly rate, agreed. Here's the deliverables and design and everything sounds good. Days, 
then weeks pass, the site is built with most of the controls and customizations the customer asked for. The owner is happy and cuts a check, and the web developer happily cashes it. 
The domain is advertised and everyone lives happily ever after. Except, the site is stagnant. 

The specials aren't getting updated. The blog has a couple entries and nobody's commenting on them. There's a large number of third party modules in the site and maintenance is becoming a 
hassle. Looking at the analytics, people aren't so much bouncing, as just not coming. A few months pass, the site is the same. 

A year or two passes and the business closes, and the site is quietly retired. What did the business ask for? A complicated website with lots of bells and whistles. 

What did they need? Probably just a social media page. At the end of the day, the service provider did what the customer wanted, but it wasn't what they needed.

---------------------------------------------------------------------------------------------------------------------------------------------------------------------

* What is overengineering?
--------------------------
According to Wikipedia in 2022, over-engineering is, quote, "The act of designing a product or providing a solution to a problem in an elaborate or complicated manner, where a simpler 
solution exists with the same efficiency and effectiveness as that of the original design." 

Practically. Over-engineering is the opposite of the KISS principle, an acronym for keep it simple, silly. So, why make something more complicated than it needs to be? Often, 
over-engineering is in the service of safety. "Whose safety?" you might ask. In the case of a car, the answer is obvious: Everybody. 

This includes the car's occupants, pedestrians, other drivers, the car itself, even the companies that built the car. In the case of software, what is safe? It depends on the project, 
their requirements, and the audience. There are times where less is more. There are times when it's necessary to overbuild with caution. 

If your software involves health, finance, personal information, security and so forth, then you need to be careful. Be aware of the applicable standards for your industry and exposure to 
risk. Throughout this course, we'll explore some ways to figure out what's right for your project. You too can recognize when something is over-engineered.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Rube Goldberg inventions satirized overengineering
----------------------------------------------------
Over-engineering is not a modern problem. In 1929, American cartoonist Rube Goldberg created an internationally known cartoon series named, "The Inventions of Professor Lucifer Gorgonzola 
Butts." All knowing. Goldberg wrote, "In my cartoons, Professor Lucifer Gorgonzola Butts invented elaborate machines to accomplish such Herculean tasks as shining shoes, opening screen 
doors, keeping moths out of clothes closets, retrieving soap in the bathtub, and other innocuous problems. 

Only, instead of using the scientific elements of the laboratory, I added acrobatic monkeys, dancing mice, chattering false teeth, electric heels, whirling dervishes, and other 
incongruous elements. In theory, all of these inventions would work, but were overblown to surreal and impossible proportions with a convoluted series of steps that stretched the 
imagination." Here's an example from Rube Goldberg's sideshow from November 26th, 1939. 

The weekly invention was a socially approved method of cooling hot soup. When hot soup touches your tongue you yell "ouch" and wake up a sleeping porcupine. A, quill's puncture water 
filled paper bag, B, on a balancing scale. On the opposite side of the scale, the weight of a ball, C, opens a Jack in a box, D. 

A wax head of a movie magnate, E, shoots out of the Jack in the box. And a yesman, F, starts nodding their head, causing a fan, G, to cool off the soup. The satirical impact could be 
found in other mediums, including in his friend, Charlie Chaplin's 1936 film, "Modern Times." The movie featured a Rube Goldberg invention brought to life feeding Chaplin in an incredibly 
memorable and over the top scene. In the 1940 short film, "Something for Nothing," Goldberg compares his outlandishly complicated inventions to real patents. 

The example he gave was U.S. patent 556248, a saluting device from March, 1896. From the patent itself, this invention relates to a novel device for automatically affecting polite 
salutations by the elevation and rotation of the hat on the head of the saluting party when said person bows to the person or person saluted, the actuation of the hat being produced by a 
mechanism therein and without the use of the hands in any manner. The patent was granted. Rube Goldberg's satire highlights that over-engineering is not a modern problem. As with all 
great satires, we laugh as we learn.

------------------------------------------------------------------------------------------------------------------------------------------------------------------




























